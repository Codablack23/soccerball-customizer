/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 ./public/models/soccer_ball.glb --t 
Author: typhomnt (https://sketchfab.com/typhomnt)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/soccer-ball-46c91864ef384158b0078e20bdbfe3e9
Title: Soccer Ball
*/

import * as THREE from 'three'
import React, { useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useLoader } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
    Object_3: THREE.Mesh
  }
  materials: {
    Black_s: THREE.MeshStandardMaterial
    White_s: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function SoccerBallModel(props: JSX.IntrinsicElements['group']) {
  const [scale,setScale] = useState<[x:number,y:number,z:number]>([1,1,1])

  useEffect(()=>{
     setScale([0.2,0.2,0.2])
  },[])

  const { nodes, materials } = useGLTF('/models/soccer_ball.glb') as GLTFResult
  const colorMap = useLoader(THREE.TextureLoader,"/materials/m1.bmp")
  const blackM = materials.Black_s
  const whiteM = materials.White_s
  const custom = new THREE.MeshStandardMaterial({map:colorMap})
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={scale} >
        <mesh geometry={nodes.Object_2.geometry} material={whiteM}/>
        <mesh geometry={nodes.Object_3.geometry} material={blackM} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/soccer_ball.glb')
